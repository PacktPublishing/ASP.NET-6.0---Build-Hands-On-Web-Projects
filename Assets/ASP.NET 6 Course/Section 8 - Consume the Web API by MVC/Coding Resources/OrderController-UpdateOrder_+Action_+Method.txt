using System.Collections.Generic;
using System.Net.Http;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using WebAPIConsume.Models;

namespace WebAPIConsume.Controllers
{
    public class OrderController : Controller
    {
       
       
        [HttpGet]
        public async Task<IActionResult> UpdateOrder(int id)
        {
            Order order = new Order();
            using (var httpClient = new HttpClient())
            {
                using (var response = await httpClient.GetAsync("https://localhost:44395/api/Order/" + id))
                {
                    string apiResponse = await response.Content.ReadAsStringAsync();
                    order = JsonConvert.DeserializeObject<Order>(apiResponse);
                }
            }
            return View(order);
        }
        [HttpPost]
        public async Task<IActionResult> UpdateOrder(Order order)
        {
            Order receivedOrder = new Order();
            if (ModelState.IsValid)
            {
                using (var httpClient = new HttpClient())
                {
                    var content = new MultipartFormDataContent();
                    content.Add(new StringContent(order.Id.ToString()), "Id");
                    content.Add(new StringContent(order.CustomerId.ToString()), "CustomerId");
                    content.Add(new StringContent(order.Description), "Description");
                    content.Add(new StringContent(order.OrderCost.ToString()), "OrderCost");
                    using (var response = await httpClient.PutAsync("https://localhost:44395/api/Order/", content))
                    {
                        string apiResponse = await response.Content.ReadAsStringAsync();
                        ViewBag.Result = "Success";
                        receivedOrder = JsonConvert.DeserializeObject<Order>(apiResponse);
                    }

                }
            }
            return View(receivedOrder);
        }
       
    }
}
